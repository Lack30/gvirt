// MIT License
//
// Copyright (c) 2021 Lack
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package gkvm

type Unit string

const (
	UnitBytes = "bytes"
	UnitB     = "B"
	UnitM     = "M"
	UnitG     = "G"
	UnitT     = "T"
	UnitKiB   = "KiB"
	UnitMiB   = "MiB"
	UnitGiB   = "GiB"
	UnitTiB   = "TiB"
)

type Size struct {
	Unit  Unit  `xml:"unit,attr,omitempty" json:"unit,omitempty"`
	Value int64 `xml:",chardata" json:"value,omitempty"`
}

type Permissions struct {
	Model int32  `xml:"model,omitempty" json:"model,omitempty"`
	Owner int32  `xml:"owner,omitempty" json:"owner,omitempty"`
	Group int32  `xml:"group,omitempty" json:"group,omitempty"`
	Label string `xml:"label,omitempty" json:"label,omitempty"`
}

type ButtonState string

const (
	ButtonStateYes = "yes"
	ButtonStateNo  = "no"
)

type TurnState string

const (
	TurnStateOn  TurnState = "no"
	TurnStateOff TurnState = "off"
)

type Entry struct {
	Name  string `xml:"name,attr,omitempty" json:"name,omitempty"`
	File  string `xml:"file,attr,omitempty" json:"file,omitempty"`
	Value string `xml:",chardata" json:"value"`
}

type Entries struct {
	Entry []Entry `xml:"entry" json:"entry"`
}

type Empty struct {
}

type StorageEncryptionFormat string

const (
	StorageEncryptionFormatDefault StorageEncryptionFormat = "default"
	StorageEncryptionFormatQcow    StorageEncryptionFormat = "qcow"
	StorageEncryptionFormatLuks    StorageEncryptionFormat = "luks"
)

type StorageEncryption struct {
	Format StorageEncryptionFormat `xml:"format" json:"format"`

	Secret *StorageEncryptionSecret `xml:"secret,omitempty" json:"secret,omitempty"`

	// This element describes the cipher algorithm to be used to either encrypt or decrypt the luks volume.
	Cipher *StorageEncryptionCipher `xml:"cipher,omitempty" json:"cipher,omitempty"`

	// This optional element describes the initialization vector generation algorithm used in conjunction
	//with the cipher. If the cipher is not provided, then an error will be generated by the parser.
	Ivgen *StorageEncryptionIvgen `xml:"ivgen,omitempty" json:"ivgen,omitempty"`
}

type StorageEncryptionSecretType string

const (
	StorageEncryptionSecretTypePassphrase StorageEncryptionSecretType = "passphrase"
)

type StorageEncryptionSecret struct {
	Type StorageEncryptionSecretType `xml:"type,attr,attr" json:"type,omitempty"`
	UUID string                      `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`
}

type StorageEncryptionCipherName string

const (
	StorageEncryptionCipherNameAes     StorageEncryptionCipherName = "aes"
	StorageEncryptionCipherNameDes     StorageEncryptionCipherName = "des"
	StorageEncryptionCipherNameCast5   StorageEncryptionCipherName = "cast5"
	StorageEncryptionCipherNameSerpent StorageEncryptionCipherName = "serpent"
	StorageEncryptionCipherNameTwofish StorageEncryptionCipherName = "twofish"
)

type StorageEncryptionCipherMode string

const (
	StorageEncryptionCipherModeCbc StorageEncryptionCipherMode = "cbc"
	StorageEncryptionCipherModeXts StorageEncryptionCipherMode = "xts"
	StorageEncryptionCipherModeEcb StorageEncryptionCipherMode = "ecb"
)

type StorageEncryptionHash string

const (
	StorageEncryptionHashMd5    StorageEncryptionHash = "md5"
	StorageEncryptionHashSha1   StorageEncryptionHash = "sha1"
	StorageEncryptionHashSha256 StorageEncryptionHash = "sha256"
)

type StorageEncryptionCipher struct {
	// The name of the cipher algorithm used for data encryption, such as 'aes', 'des', 'cast5', 'serpent', 'twofish',
	// etc. Support of the specific algorithm is storage driver implementation dependent.
	Name StorageEncryptionCipherName `xml:"name,attr,omitempty" json:"name,omitempty"`

	// The size of the cipher in bits, such as '256', '192', '128', etc. Support of the specific size for a
	// specific cipher is hypervisor dependent.
	Size int32 `xml:"size,attr,omitempty" json:"size,omitempty"`

	// An optional cipher algorithm mode such as 'cbc', 'xts', 'ecb', etc. Support of the specific cipher mode is
	// hypervisor dependent.
	Mode StorageEncryptionCipherMode `xml:"mode,attr,omitempty" json:"mode,omitempty"`

	// An optional master key hash algorithm such as 'md5', 'sha1', 'sha256', etc. Support of the specific hash
	// algorithm is hypervisor dependent.
	Hash StorageEncryptionHash `xml:"hash,attr,omitempty" json:"hash,omitempty"`
}

type StorageEncryptionIvgenName string

const (
	StorageEncryptionIvgenNamePlain   StorageEncryptionIvgenName = "plain"
	StorageEncryptionIvgenNamePlain64 StorageEncryptionIvgenName = "plain64"
	StorageEncryptionIvgenNameEssiv   StorageEncryptionIvgenName = "essiv"
)

type StorageEncryptionIvgen struct {
	// The name of the algorithm, such as 'plain', 'plain64', 'essiv', etc. Support of the specific algorithm
	//is hypervisor dependent.
	Name StorageEncryptionIvgenName `xml:"name,attr,omitempty" json:"name,omitempty"`

	// An optional hash algorithm such as 'md5', 'sha1', 'sha256', etc. Support of the specific ivgen hash
	// algorithm is hypervisor dependent.
	Hash StorageEncryptionHash `xml:"hash,attr,omitempty" json:"hash,omitempty"`
}
